using UnityEngine;
using System.Collections;
using System.Collections.Generic;

namespace AStar_2D
{
    /// <summary>
    /// The argument that is passed to a <see cref="MonoDelegate"/> listener method.
    /// Contains the resulting path and the status of the request.
    /// </summary>
    public sealed class MonoDelegateEvent
    {
        // Public
        /// <summary>
        /// The <see cref="Path"/> generated by the algorithm or null if an error occured.
        /// </summary>
        public Path path = null;
        /// <summary>
        /// The <see cref="PathRequestStatus"/> of the request.
        /// </summary>
        public PathRequestStatus status = PathRequestStatus.InvalidIndex;

        // Constructor
        /// <summary>
        /// Parameter constructor.
        /// </summary>
        /// <param name="path">The resulting path</param>
        /// <param name="status">The status of the request</param>
        public MonoDelegateEvent(Path path, PathRequestStatus status)
        {
            this.path = path;
            this.status = status;
        }
    }

    /// <summary>
    /// A callback class that provides an alternative to C# delegates.
    /// Works in a similar way to 'SendMessage' and accepts a target script and a taregt method.
    /// All <see cref="MonoDelegate"/> callback method must accept a <see cref="MonoDelegateEvent"/> as a parameter.
    /// An example callback method is shown below.
    /// <code language="C#">
    /// public void myCallback(MonoDelegateEvent args)
    /// {
    ///     if(args.status == PathRequestStatus.PathFound)
    ///     {
    ///         followPath(args.path);
    ///     }
    /// }
    /// </code>
    /// </summary>
    public sealed class MonoDelegate
    {
        private class MonoDelegateTarget
        {
            // Public
            public MonoBehaviour targetScript = null;
            public string targetMethod = "";

            // Constructor
            public MonoDelegateTarget(MonoBehaviour script, string method)
            {
                this.targetScript = script;
                this.targetMethod = method;
            }

            // Methods
            public void invoke(MonoDelegateEvent argument)
            {
                // Check for valid reference
                if(targetScript != null)
                {
                    // Check for valid method
                    if(string.IsNullOrEmpty(targetMethod) == false)
                    {
                        // Trgger the method
                        targetScript.SendMessage(targetMethod, argument, SendMessageOptions.RequireReceiver);
                    }
                }
            }
        }

        // Private
        private List<MonoDelegateTarget> listeners = new List<MonoDelegateTarget>();

        // Constructor
        /// <summary>
        /// Parameter constructor.
        /// </summary>
        /// <param name="targetScript">The script that should receive the event</param>
        /// <param name="targetMethod">The method that should receive the event</param>
        public MonoDelegate(MonoBehaviour targetScript, string targetMethod)
        {
            // Add a default listener
            addListener(targetScript, targetMethod);
        }

        // Methods
        /// <summary>
        /// Adds an additional listener to the delegate.
        /// </summary>
        /// <param name="targetScript">The script that should receive the event</param>
        /// <param name="targetMethod">The method that should receive the event</param>
        public void addListener(MonoBehaviour targetScript, string targetMethod)
        {
            // Create a link target
            MonoDelegateTarget target = new MonoDelegateTarget(targetScript, targetMethod);

            // Add
            listeners.Add(target);
        }

        /// <summary>
        /// Triggers the event for all registeed listeners.
        /// Should only be called from the main thread.
        /// </summary>
        /// <param name="argument">The <see cref="MonoDelegateEvent"/> to pass to the listeners</param>
        public void invoke(MonoDelegateEvent argument)
        {
            // Invoke all listeners
            foreach (MonoDelegateTarget target in listeners)
                target.invoke(argument);
        }
    }
}
